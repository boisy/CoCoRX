* This code is designed to:
* 1) identify Coco1 or 2 from a Coco3
* 2) move code to lower RAM as it will not access SEB while in ROM mode
* 3) indicate the location of faulty RAM
* 4) Coco1 identify 4K, 16K, 32K, 64K
* 5) Coco3 identify 128K, 512K, 2M, and 8M
* 6) changed memory is reset so that nothing is lost
* Robert Gault



R1MB	EQU	1		TOGGLE FOR 1MB VID
R2MB	EQU	2		TOGGLE FOR 2MB VID
V4MB	EQU	4		TOGGLE FOR 4MB VIDEO
V8MB	EQU	8		TOGGLE FOR 8MB VIDEO
R4MB	EQU	16		TOGGLE FOR 4MB MEMORY
R8MB	EQU	32		TOGGLE FOR 8MB MEMORY

RAMDoctor	STA	ROM
	LDX	$FFFE		Test for a Coco3
	CMPX	#$8C1B
	BNE	A@
	STA	FASTC3
	LBRA	COCO3
A@	STA	FASTC1		ROM fast RAM slow, can't do better on a Coco1 or 2
	ldd	#$400		Tell Basic the current text screen pointer so
	std	$88		repeative tests print at start of screen
	lda	#$60
	lbsr	ClearScreen
	LEAX	MSGA-1,PCR	Coco1 or 2 found
	JSR	PRINT
	LEAX	PC1,PCR		Move code to low RAM so that most of memory can be accessed
	LDY	#$D00
B@	LDD	,X++
	STD	,Y++
	CMPX	#PC1E
	BLO	B@
	JMP	$D00

PC1	LEAY	MEMTBL,PCR	Test for 4K, 16K, 32K, and 64K
	LDB	#$FF
A@	LDX	,Y++	get an address
	INCB
	STB	AMNT2,PCR	position in table
	LDA	,X	get the byte
	COM	,X	Change what might be ROM
	CMPA	,X	did it change?
	BEQ	B@	Go if ROM ie. no change
	STA	,X	restore
	BRA	A@
B@	LEAX	-1,X	Highest RAM that can be tested
	STX	ADDR,PCR	save it
	CMPX	#$7FFF
	BNE	TSTING	less than 32K RAM present
	STA	RAM	engage full ram mode
	LDA	$8000
	COM	$8000	try to change memory
	CMPA	$8000
	BEQ	TSTING	only 32K RAM
	INC	AMNT2,PCR	increase position
	LDX	#$FF00	maximum address to test is ADDR-1
	STX	ADDR,PCR	save it
	BSR	TMPVAL	print total memory
	STA	RAM	back to RAM mode
	BRA	TST2

TSTING	BSR	TMPVAL
TST2	LDX	#$0	Test from $0000-$0DFF
A@	BSR	STUFF
	CMPX	#$D00	don't overwrite our code
	BNE	A@
	LDX	ADDR,PCR
	CMPX	#$EFF
	BEQ	OK
	LDX	#$E00	Test from $E00-$FEFF
B@	BSR	STUFF
	CMPX	ADDR,PCR
	BNE	B@
	BRA	OK

* Subroutine for TST2 to compress the code
STUFF	LEAY	TABLE1,PCR	data to write to memory
A@	LDB	#3	index
	LDA	,X	get a byte
	STA	TMP,PCR	save it
B@	LDA	B,Y	get data
	STA	,X	write to memory
	LDA	,X	read it back
	CMPA	B,Y	did it change?
	BNE	ERR
	DECB		update index
	BPL	B@
	LDA	TMP,PCR	get original value
	STA	,X+	restore memory
	RTS

* This routine prints the amount of Coco1 or 2 memory
TMPVAL	STA	ROM	Just 32K RAM so go back to ROM
	LEAX	MSGC-1,PCR	"You seem to have"
	JSR	PRINT
	LEAX	AMNT-1,PCR	4,16,32,64K
	LDA	#5
	LDB	AMNT2,PCR
	MUL
	LEAX	D,X
	JMP	PRINT

* Print address where RAM failed
ERR	STA	ROM
	STX	LOC
	LEAX	ERRMSG-1,PCR	"an error at"
	JSR	PRINT
	LDD	LOC,PCR
	JSR	NUMBR
	BRA	EXIT
	
OK	STA	ROM
	LEAX	OKMSG-1,PCR
OK2	JSR	PRINT
EXIT	JSR	$ADFB
	STA	SLOWC1
	RTS

ADDR	ZMB	2
TMP	ZMB	1
LOC	ZMB	1
MEMTBL	FDB	$1000,$4000,$8000
TABLE1	FCB	0,$FF,%10101010,%01010101
MSGA	FCC	/OK, YOU HAVE A COCO1 OR 2/
	FCB	$0D
	FCC	/TESTING MEMORY/
	FCB	$0D,0

MSGC	FCC	/YOU SEEM TO HAVE/
	FCB	$0D,0
AMNT2	FCB	0
AMNT	FCC	/04K/	*3bytes
	FCB	$0D,0	*2bytes
	FCC	/16K/
	FCB	$0D,0
	FCC	/32K/
	FCB	$0D,0
	FCC	/64K/
	FCB	$0D,0
ERRMSG	FCC	/AN ERROR OCCURED AT /
	FCB	0
OKMSG	FCC	/NO ERRORS IN MEMORY/
	FCB	$0D
	FCC	/PRESS ANY KEY/
	FCB	$0D,0
PC1E	EQU	*



COCO3	LEAX	CC3,PCR	move code to $7000
	LDY	#$7000
A@	LDD	,X++
	STD	,Y++
	CMPX	#PC3E
	BLO	A@
	JMP	$7000

CC3	STA	RAM		Coco3 needs to run in all RAM mode
	CLR	$E6		TELL BASIC IT'S TEXT
	LDD	$FFB0
	STD	COLORS,PCR
	JSR	WDTH80		AND WIDTH40
	LEAX	MSGB-1,PCR
	JSR	PRINT
	LEAX	TEST-1,PCR	POINT TO MESSAGE
	JSR	PRINT		PRINT IT
	LBSR	MEMTST		Rough test of memory
	DECA
	STA	TOTRAM,PCR
	STA	MAXRAM,PCR
	JSR	$ADFB		wait for keypress
	LEAX	READY-1,PCR
	JSR	PRINT
	LDA	#%01000100	SET COCO3 TYPE MODE; FEXX NOT CNST
	STA	$FF90		TELL COCO
* WE ARE NOW READY TO ENGAGE EXTRA MEMORY BUT KEEP TEXT SCREEN
* IN VIEW. THIS MEANS WE NEED TO SET EXTRA BITS FOR CPU MEM NOT
* EXTRA BITS FOR VID MEM. I ASSUMED THAT WE ARE FULL 8 MEG VIDEO
* AND BITS 0 & 1 AFFECT CPU ONLY DURING AN MMU WRITE BUT VIDEO
* ALL THE TIME.

	LDA	#$39
	STA	MMU-1
	LBSR	GETTBL		LOAD A WITH VALUE FOR EXTRA MEM.
	CLRB
	STB	MMUIMG,PCR	SAVE VALUE
A@	STA	EXTRCP		TELL THE CPU
	STB	MMU		TELL COCO
	CLRA			Fill with $00
	BSR	FILL
	COMA			Fill with $FF
	BSR	FILL
	LDA	#%10101010	pattern
	BSR	FILL
	COMA			%01010101
	BSR	FILL
	LDA	TOTRAM,PCR
	CMPA	#3		1Meg
	BHI	B@
	CMPA	#2		512K
	BLO	B@
	LDA	MMUIMG,PCR
	CMPA	#$35
	BNE	B@
	LDA	#$3F
	STA	MMUIMG,PCR
B@	LBSR	GETTBL
	CMPB	MMUIMG,PCR
	BNE	C@
	TST	EXIMG,PCR
	BEQ	DONE
	DEC	TOTRAM,PCR
	LBSR	GETTBL
	CLR	MMUIMG
	BRA	D@
C@	INC	MMUIMG,PCR
D@	LDB	MMUIMG,PCR
	STB	$FF9A		FLIP BORDER COLOR
	BRA	A@

DONE	LDD	COLORS,PCR
	STD	$FFB0
	CLR	EXTRCP
	LDA	#$3A		RESET MMU BLOCK
	STA	MMU
	LEAX	GOOD-1,PCR
	JSR	PRINT
	JSR	PAUSE
	JSR	WDTH32
	STA	ROM
	RTS

FILL	STS	STACK
	LDS	#$6000
	TFR	A,B
	TFR	D,X
	TFR	X,Y
	TFR	X,U
A@	PSHS	D,X,Y,U
	CMPS	#PAGRAM
	BNE	A@
	LDS	STACK
	LDX	#PAGRAM
B@	CMPA	,X+
	BNE	C@
	CMPX	#$6000
	BNE	B@
	RTS
C@	LEAS	2,S
	BRA	ERROR


GETTBL	PSHS	X
	LEAX	TABLE3,PCR
	LDB	TOTRAM,PCR
	LSLB
	LDD	B,X
	STA	EXIMG,PCR
	STB	MASK,PCR
	PULS	X,PC

ERROR	LEAX	-1,X
	STX	BADMEM,PCR
	LDD	#$3A
	STA	EXTRCP
	STB	MMU
	ANDCC	#$AF
	LEAX	BAD-1,PCR
	JSR	PRINT
	CLRA
	LDB	EXIMG,PCR
	JSR	DECMAL
	BSR	PRNTAB
	CLRA
	LDB	MMUIMG,PCR
	JSR	DECMAL
	BSR	PRNTAB
	LDD	BADMEM,PCR
	JMP	DECMAL

PRNTAB	LEAX	TAB-1,PCR
	JMP	PRINT

* Rough test of total Coco3 memory
MEMTST	ORCC	#$50
	LDX	#'M*256+'T	Unlikely data
	LDY	#0
	LDD	#$39
	STA	EXTRCP
	STB	MMU-1
	STY	IMG
	LDA	#9
	STA	MMU-1
	STX	IMG
	STB	MMU-1
	CMPX	IMG
	BEQ	M128
	LDA	#$79
	STA	MMU-1
	STX	IMG
	STB	MMU-1
	CMPX	IMG
	BEQ	M512
	LDA	#$B9
	STA	MMU-1
	STX	IMG
	STB	MMU-1
	CMPX	IMG
	BEQ	M1M
	LDA	#%10000
	STA	EXTRCP
	STB	MMU-1
	STX	IMG
	CLR	EXTRCP
	STB	MMU-1
	CMPX	IMG
	BEQ	M2M
	LDA	#%100000
	STA	EXTRCP
	STB	MMU-1
	STX	IMG
	CLR	EXTRCP
	STB	MMU-1
	CMPX	IMG,PCR
	BEQ	M4M
	LDA	#%110000
	STA	EXTRCP
	STB	MMU-1
	STX	IMG,PCR
	CLR	EXTRCP
	STB	MMU-1
	CMPX	IMG

	BEQ	M6M
M8M	LDA	#7
	BRA	SHOW
M128	LDA	#1
	BRA	SHOW
M512	LDA	#2
	BRA	SHOW
M1M	LDA	#3
	BRA	SHOW
M2M	LDA	#4
	BRA	SHOW
M4M	LDA	#5
	BRA	SHOW
M6M	LDA	#6

SHOW	ANDCC	#$AF	Start interrupts
	LEAX	SZ-1,PCR
	PSHS	A
	JSR	PRINT
	LDA	,S
	DECA
	LDB	#5
	MUL
	LEAX	K128-1,PCR	table of total memory
	ABX
	LDA	CURSOR
	ORA	#$80
	STA	CURSOR
	JSR	PRINT
	LDA	CURSOR
	ANDA	#$7F
	STA	CURSOR
	LEAX	SZ2-1,PCR
	JSR	PRINT
	CLRA
	PULS	A,PC

* DATA BYTES
MMUIMG	ZMB	1
BAS512	ZMB	1
STOP	ZMB	1
EXIMG	ZMB	1
MAXRAM	ZMB	1
TBPTR	ZMB	1
BADMEM	ZMB	2
COLORS	ZMB	2
CPU	ZMB	1	$FF=M6809 0=HD6309
STACK	ZMB	4

MSGB	FCC	/OK, You have a Coco3/
	FCB	$0D,0
	
TEST	FCC	/MEMORY TEST/
	FCB	$0D
	FCC	/Doing a quick test for memory, please wait../
	FDB	$D00

SZ	FCC	/There seems to be /
	FCB	0
K128	FCC	/128K/
	FCB	0
	FCC	/512K/
	FCB	0
	FCC	/1MEG/
	FCB	0
	FCC	/2MEG/
	FCB	0
	FCC	/4MEG/
	FCB	0
	FCC	/6MEG/
	FCB	0
	FCC	/8MEG/
	FCB	0
SZ2	FCC	/ of memory. If not correct hit RESET to quit./
	FCB	$0D
	FCC	/Hit any other key to continue./
	FDB	$D00

READY	FCB	$0D
	FCC	/Now writing $00,$55,$AA, and $FF to memory./
	fcb	$0d
	FCC	/Errors will be reported when finished; 5min or less./
	fcb	$0d
	fcc	/Border color will change after each $2000 RAM test./
	fcb	$0d,$0d,0

GOOD	FCC	/YAHOO!!! No errors found!/
	fcb	$0d
	fcc	/Hit any key./
	FDB	$D00
BAD	FCC	/OOOPS!? Terminated with error at:/
	FCB	$0D
	FCC	/EXTRA BITS,  MMU BLOCK,           BYTE/
	fcb	$0d
	fcc	/Exit with any key./
	FDB	$D00

TAB	FCC	/                /
	FCB	0


TABLE3	ZMB	5		* 128K
	FCB	0,$35		* 512K
	FCB	0,$7F		* 1M
	FCB	0,$FF		* 2M
	FCB	%00010000,$FF	* 4M
	FCB	%00100000,$FF	* 6M
	FCB	%00110000,$FF	* 8M

TOTRAM	ZMB 1
MASK	ZMB	1
PC3E	EQU	*
